import { AureliaLeafletException } from "./au-leaflet-exception";
import {
    Marker, Popup, TileLayer, tileLayer, ImageOverlay, Polyline, Circle, CircleMarker, LayerGroup, FeatureGroup,
    geoJSON, Rectangle, Polygon, featureGroup, GeoJSON, layerGroup, circleMarker, circle, rectangle, polygon,
    Canvas
} from "leaflet";


export default class LayerFactory {

    constructor() {

    }

    getLayer(layer: any) {
        if (!layer.hasOwnProperty("type")) {
            layer.type = "tile";
        }

        let instance;

        switch (layer.type) {
            case "marker":
                instance = this.getMarker(layer);
                break;
            case "popup":
                instance = this.getPopup(layer);
                break;
            case "tile":
                instance = this.getTile(layer);
                break;
            case "wms":
                instance = this.getWMS(layer);
                break;
            case "canvas":
                instance = this.getCanvas(layer);
                break;
            case "imageOverlay":
                instance = this.getImageOverlay(layer);
                break;
            case "polyline":
                instance = this.getPolyline(layer);
                break;
            /* case "multiPolyline":
                instance = this.getMultiPolyline(layer);
                break; */
            case "polygone":
                instance = this.getPolygon(layer);
                break;
            case "multiPolygone":
                instance = this.getMultiPolygon(layer);
                break;
            case "rectangle":
                instance = this.getRectangle(layer);
                break;
            case "circle":
                instance = this.getCircle(layer);
                break;
            case "circleMarker":
                instance = this.getCircleMarker(layer);
                break;
            case "group":
                instance = this.getLayerGroup(layer);
                break;
            case "featureGroup":
                instance = this.getFeatureGroup(layer);
                break;
            case "geoJSON":
                instance = this.getGeoJson(layer);
                break;
            default:
                throw new AureliaLeafletException(`Layer type ${layer.type} not implemented`);
        }

        if (typeof layer.initCallback === "function") {
            layer.initCallback(instance);
        }

        if (layer.hasOwnProperty("events")) {
            for (let e of layer.events) {
                if (typeof instance.on === "function") {
                    instance.on(e.name, e.callback);
                }
            }
        }

        return instance;
    }

    getMarker(layer: any) {
        if (!layer.hasOwnProperty("latLng")) {
            throw new AureliaLeafletException("No latLng given for layer.type \"marker\"");
        }
        let marker = new Marker(layer.latLng, layer.options);
        if (layer.hasOwnProperty("popupContent")) {
            marker.bindPopup(layer.popupContent).openPopup();
        }
        return marker;
    }

    getPopup(layer: any) {
        let popup = new Popup(layer.options);
        if (layer.hasOwnProperty("content")) {
            popup.setContent(layer.content);
        }
        if (layer.hasOwnProperty("latLng")) {
            popup.setLatLng(layer.latLng);
        }
        return popup;
    }

    getTile(layer: any) {
        if (!layer.hasOwnProperty("url")) {
            throw new AureliaLeafletException("No url given for layer.type \"tile\"");
        }
        return new TileLayer(layer.url, layer.options);
    }

    getWMS(layer: any) {
        if (!layer.hasOwnProperty("url")) {
            throw new AureliaLeafletException("No url given for layer.type \"wms\"");
        }
        return tileLayer.wms(layer.url, layer.options);
    }

    getCanvas(layer: any): Canvas {
        let l: any = new Canvas(layer.options);
        if (layer.hasOwnProperty("drawTile")) {
            l.drawTile = layer.drawTile;
        }
        if (layer.hasOwnProperty("tileDrawn")) {
            l.tileDrawn = layer.tileDrawn;
        }
        return l;
    }

    getImageOverlay(layer: any) {
        if (!layer.hasOwnProperty("url")) {
            throw new AureliaLeafletException("No url given for layer.type \"imageOverlay\"");
        }
        if (!layer.hasOwnProperty("imageBounds")) {
            throw new AureliaLeafletException("No imageBounds given for layer.type \"imageOverlay\"");
        }
        return new ImageOverlay(layer.url, layer.imageBounds, layer.options);
    }

    getPolyline(layer: any) {
        if (!layer.hasOwnProperty("latLngs")) {
            throw new AureliaLeafletException("No latLngs given for layer.type \"polyline\"");
        }
        return new Polyline(layer.latlngs, layer.options);
    }

    /* getMultiPolyline(layer) {
        if (!layer.hasOwnProperty("latLngs")) {
            throw new AureliaLeafletException("No latLngs given for layer.type \"multiPolyline\"");
        }
        return new MultiPolyline(layer.latlngs, layer.options);
    } */

    getPolygon(layer: any): Polygon {
        if (!layer.hasOwnProperty("latLngs")) {
            throw new AureliaLeafletException("No latLngs given for layer.type \"polygone\"");
        }
        return polygon(layer.latlngs, layer.options);
    }

    getMultiPolygon(layer: any): GeoJSONMultiPolygon {
        if (!layer.hasOwnProperty("latLngs")) {
            throw new AureliaLeafletException("No latLngs given for layer.type \"multiPolygone\"");
        }
        return new GeoJSONMultiPolygon(layer.latlngs, layer.options);
    }

    getRectangle(layer: any): Rectangle {
        if (!layer.hasOwnProperty("bounds")) {
            throw new AureliaLeafletException("No bounds given for layer.type \"rectangle\"");
        }
        return rectangle(layer.bounds, layer.options);
    }

    getCircle(layer: any): Circle {
        if (!layer.hasOwnProperty("latLng")) {
            throw new AureliaLeafletException("No latLng given for layer.type \"circle\"");
        }
        if (!layer.hasOwnProperty("radius")) {
            throw new AureliaLeafletException("No radius given for layer.type \"circle\"");
        }
        return circle(layer.latLng, layer.radius, layer.options);
    }

    getCircleMarker(layer: any): CircleMarker {
        if (!layer.hasOwnProperty("latLng")) {
            throw new AureliaLeafletException("No latLng given for layer.type \"circleMarker\"");
        }
        return circleMarker(layer.latLng, layer.options);
    }

    getLayerGroup(layer: any): LayerGroup {
        if (!layer.hasOwnProperty("layers")) {
            throw new AureliaLeafletException("No layers given for layer.type \"group\"");
        }
        let layers = [];
        for (let l of layer.layers) {
            layers.push(this.getLayer(l));
        }
        return layerGroup(layers);
    }

    getFeatureGroup(layer: any): FeatureGroup {
        if (!layer.hasOwnProperty("layers")) {
            throw new AureliaLeafletException("No layers given for layer.type \"featureGroup\"");
        }
        let layers = [];
        for (let l of layer.layers) {
            layers.push(this.getLayer(l));
        }
        return featureGroup(layers);
    }

    getGeoJson(layer: any): GeoJSON {
        if (!layer.hasOwnProperty("data")) {
            throw new AureliaLeafletException("No data property given for layer.type \"geoJSON\"");
        }
        return geoJSON(layer.data, layer.options);
    }
}
